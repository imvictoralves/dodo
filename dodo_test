#!/usr/bin/env bash

# import dodo function
. dodo_funcs.sh

TODOFILE=".dodo-todos-test-only"

_assert(){
    test "$@" && \
        echo -n "✔︎" && return 0 || \
        echo -e "✕\nFAIL: \"${FUNCNAME[1]}\" has failed. \n      False assertion: $@." 
    exit 1
}

_clean_fixtures(){
    rm -f $TODOFILE
}

_dodo(){
    local main=$(_main $@)

    # remove new line to assert easily
    echo -n "${main//[$'\t\r\n']}" 
}

_test_show_error_when_list_todo_without_file(){
    _assert "$(_dodo -list)" = "$(_err_cannot_find_todos_file)" 
}

_test_new_entry_creates_todo_file(){
    _clean_fixtures
    _assert \! -f $TODOFILE 
    _dodo my first todo item
    _assert -f $TODOFILE
    _clean_fixtures
}

_test_new_entries_are_saved(){
    _clean_fixtures
    declare -a entries=("entry one" "entry two" "entry three")

    local status="$StatusPending | "
    local buf=""
    for i in "${entries[@]}"
    do
       _dodo "$i"

       buf="$buf$status$i"
       _assert "$buf" = "$(_dodo -list)"
    done
}

_test_list_is_default(){
  _clean_fixtures
  local item="new entry"
  _dodo $item
  _assert "$StatusPending | $item" = "$(_dodo)" 
}

_test_delete_an_item(){
  _clean_fixtures
  local status="$StatusPending | "
  local itemOne="entry n. 1" 
  local itemTwo="entry n. 2" 
  _dodo $itemOne
  _dodo $itemTwo
  _assert "$status$itemOne$status$itemTwo" = "$(_dodo -list)" 
  _dodo -delete 2 # want to delete the second item and not index number two
  _assert "$status$itemOne" = "$(_dodo -list)" 
}

_test_default_status_is_pending(){
  _clean_fixtures
  _dodo A new item
  _assert $StatusPending = "$(_dodo -list | grep -oi pending)" 
}

_test_set_status_to_done(){
  _clean_fixtures
  _dodo this new item
  _dodo -done 1
  _assert $StatusDone = "$(_dodo -list | grep -oi done)" 
}

_clean_fixtures
_test_show_error_when_list_todo_without_file
_test_new_entry_creates_todo_file
_test_new_entries_are_saved
_test_list_is_default
_test_delete_an_item
_test_default_status_is_pending
_test_set_status_to_done
_clean_fixtures

echo "" # new line at the end
